# StartLearningSwift
A few useful links which is very necessary if you start developing iOS app using Swift

# 1. Basic Knowledge ::
  While you start learning swift, you should be familiar with types, classes and objects, class architecture, control loop (for, while, switch), conditional statement etc. 
  [Swift Tutorial a Quick Start](http://www.raywenderlich.com/74438/swift-tutorial-a-quick-start ) is precise and to the point. First, start reading swift with it. 
  [Swift Pocket Reference pdf by Anthony Gray](http://shop.oreilly.com/product/0636920035640.do) is really helpful. You can use this book as referece while your are developing.
  [Apple Provided Swift Book](https://itunes.apple.com/us/book/swift-programming-language/id881256329?mt=11&ign-mpt=uo%3D8)
  
# 2. Design Pattern ::
  For communication between different component in any project we use several technique e.g. - delegate, KVO, facade, NSNotificationCenter etc. They are more techiniques are available and the most importantly you need to know which is appropriate for what. 
  [Design Pattern in Swift](https://github.com/ochococo/Design-Patterns-In-Swift) is best.
  [Introducing Design Pattern in Swift](http://www.raywenderlich.com/86477/introducing-ios-design-patterns-in-swift-part-1 )

# 3. Best Practices ::
  This will differentiate you from other developer. It will tell you about naming convention, coding style etc. If you want to be a good developer, you must follow a few rules while you are developing apps.
  [iOS Good Practices](https://github.com/futurice/ios-good-practices) It describes about project architecture also.
  [Raywenderlich Swift Style Guide](https://github.com/raywenderlich/swift-style-guide )
  [Github Swift Style Guide](https://github.com/github/swift-style-guide)
  
# 4. Application Architecture ::
  Along with best practices this will enrich you as good developer. Not only that it will help you to increase reusability, maintainance of application.
  [Futurice Application Architecture](https://github.com/futurice/ios-good-practices#architecture)
  [More About VIPER](https://medium.com/brigade-engineering/brigades-experience-using-an-mvc-alternative-36ef1601a41f )
  A few developer says you should follow your own architecture. They suggest to design architecture for specific app. I completed agree with them. But, if you are beginner in development, you must follow any architecture to make your application modular.
  
# 5. Testing Framework ::
  Earlier, I believed that using testing framework is useless. But, while I was developing some app, it took a lot time for manual testing. My senior advised me to use any testing framework and elaborate the reason behind it. If you write test cases for any methods, it would take a few seconds to test. If you test that manual, it would take more than 5 min each time. It comes under best practice. If you write test cases for your code, people can realize the reliability of your code when you will upload them on github.
  [Apple Provided XCTestCase](https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/testing_with_xcode/testing_3_writing_test_classes/testing_3_writing_test_classes.html)
  [Quick Framework](https://github.com/Quick/Quick)
  [Automation Testing](http://code.tutsplus.com/tutorials/introduction-to-ios-testing-with-ui-automation--cms-22730)
  [Raywenderlich's Blog on Automation Testing](http://www.raywenderlich.com/22590/beginning-automated-testing-with-xcode-part-12)
  
# 6. Use Reliable Open Source Library ::
  Developing an app from scratch is hectic job for developer. So, if you use a few open source libraries, it will be easier for you. There is a github repo which gathers the most required libraries in a single shade.
  [Awesome Swift](https://github.com/Wolg/awesome-swift)
  
# 7. Use Package Manager for Project ::
  There two package manager available for swift.
  [Cocoapods](http://www.raywenderlich.com/97014/use-cocoapods-with-swift)
  [Carthage](http://siki.io/using-carthage/)
  
